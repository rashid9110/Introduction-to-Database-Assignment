1. What is a Database?
A database is an organized collection of data, stored and accessed electronically. It allows users to efficiently store, retrieve,
  update, and manage information. Databases are typically managed by a Database Management System (DBMS) which provides the tools 
  for handling the data.

Example: Consider a large e-commerce website like Amazon. To store and retrieve data about customers, products, orders, and transactions,
 a database is essential. A simple operation like searching for a product, retrieving order history, or storing a customer’s profile 
 requires a structured system to organize and manage the large volume of data efficiently.

Why we need a database:

   .To avoid redundancy: In a manual system or a simple file-based system, storing data in different places may lead to duplication.
   .To manage large volumes of data: As businesses grow, the amount of data also grows, and databases are designed to handle large volumes 
     of structured data.
   .To provide security and access control: Databases allow authorized access and protect sensitive information.



2. File-Based Storage System:
A file-based storage system is a method of storing data in files, typically in a file hierarchy (folders) on a storage device.
 Each file contains specific information and is organized by the operating system.

Challenges of File-Based Storage:

(i). Data Redundancy: Inconsistent and duplicated data is common since different users or applications may store the same data multiple times in different files.
(ii). Data Isolation: Data is stored in separate files, making it hard to access or integrate different sets of related data.
(iii). Security Issues: There is limited control over who can access and modify the data, often leading to unauthorized access or accidental modification.
(iv). Concurrency Issues: It’s difficult to handle simultaneous access by multiple users, leading to data corruption.
(v). Data Integrity: Ensuring consistency of data in multiple files becomes a challenge, especially when changes need to be synchronized.


3. What is DBMS?
A Database Management System (DBMS) is software that interacts with users, applications, and the database itself to capture and 
analyze data. It provides a systematic way to create, retrieve, update, and manage data.

Need for DBMS:

 . To overcome the inefficiencies of file-based systems such as redundancy, inconsistency, and lack of security.
 . To provide better data integration and sharing.
 . To ensure efficient handling of large datasets with multiple users accessing the data simultaneously.



4. Challenges of File-Based Storage Tackled by DBMS:
 (i). Data Redundancy and Inconsistency: DBMS ensures that data is stored in a consistent and non-redundant manner using normalization.
 (ii). Data Isolation: DBMS integrates data in a way that it can be accessed from different locations, making data sharing easier.
(iii). Security Issues: DBMS provides mechanisms for enforcing user permissions, roles, and access controls, ensuring that sensitive 
       data is secure.
(iv). Concurrency Control: DBMS manages concurrent access by multiple users, preventing data corruption through transaction management.
(v). Data Integrity: DBMS maintains data integrity by enforcing constraints (e.g., primary keys, foreign keys) to ensure valid and 
     consistent data.


5. Types of Classification in DBMS:
 (i). Hierarchical DBMS: Data is organized in a tree-like structure with parent-child relationships. It’s simple but lacks flexibility 
      for complex queries.

      Example: IBM's Information Management System (IMS).

 (ii). Network DBMS: Uses a graph structure with many-to-many relationships between records, allowing more complex data modeling than 
       hierarchical models.

       Example: Integrated Data Store (IDS).

 (iii). Relational DBMS (RDBMS): Data is stored in tables (relations) with rows and columns. The relational model is the most widely 
        used, thanks to its flexibility.

        Example: MySQL, PostgreSQL.

 (iv). Object-Oriented DBMS: Combines database capabilities with object-oriented programming, allowing objects, classes, and
       inheritance to be used.
        
        Example: db4o.
 
 (v).NoSQL DBMS: Designed for unstructured or semi-structured data. It’s more flexible and scalable, handling big data and real-time 
     applications.
      
      Example: MongoDB, Cassandra.


6. Significance of Data Modeling:
Data modeling is the process of creating a conceptual representation of data, which is crucial for designing databases. It defines 
how data is stored, organized, and related within a database.

Types of Data Modeling:

 (i_). Conceptual Data Model: Focuses on a high-level design, independent of the actual database technology. It involves entities, 
       attributes, and relationships.
 (ii). Logical Data Model: Adds more detail to the conceptual model, such as the structure of the database but still independent of
       technology. It defines the types of data (e.g., strings, integers).
 (iii). Physical Data Model: Specifies how the data will actually be stored in the database, including table structures, indexes, partitions, etc.

Significance:

 . Helps in visualizing the data structure before implementation.
 . Ensures that the database design aligns with business requirements.
 . Reduces redundancy and improves data quality.


7. Three-Schema Architecture:
The three-schema architecture separates the user’s view of the database from its physical structure, enhancing flexibility, security, 
and data independence. The three levels are:

 (i). Internal Schema (Physical Level): Describes how the data is physically stored. It deals with storage methods, indexes, and file structures.
 (ii). Conceptual Schema (Logical Level): Describes the structure of the database for the entire organization, hiding the details of the physical storage. It focuses on data types, relationships, and constraints.
 (iii). External Schema (View Level): Describes how data is presented to users or applications. It provides different customized views of the database for different users.


Advantages:

 . Data Abstraction: Each level provides a different view of the data, improving flexibility in changing the internal schema without
   affecting user applications.
 . Improved Security: User access can be restricted to the external schema without exposing the entire database.
 . Easier Maintenance: Changes at one schema level do not necessarily affect other levels, making database maintenance and evolution 
   easier.